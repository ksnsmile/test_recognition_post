# -*- coding: utf-8 -*-
"""
Created on Tue Mar 25 16:02:36 2025

@author: USER
"""

import textdistance



광역자치단체_리스트 = {
    "서울", "서울시", "서울특별시", "부산", "부산시", "부산광역시",
    "대구", "대구시", "대구광역시", "인천", "인천시", "인천광역시",
    "광주", "광주시", "광주광역시", "대전", "대전시", "대전광역시",
    "울산", "울산시", "울산광역시", "세종", "세종시", "세종특별자치시",
    "경기", "경기도", "강원", "강원도", "강원특별자치도",
    "충북", "충청북도", "충남", "충청남도",
    "전북", "전라북도", "전남", "전라남도",
    "경북", "경상북도", "경남", "경상남도",
    "제주", "제주시", "제주특별자치도"
}


서울_기초자치단체_리스트 = {
    "종로구", "중구", "용산구", "성동구", "광진구",
    "동대문구", "중랑구", "성북구", "강북구", "도봉구",
    "노원구", "은평구", "서대문구", "마포구", "양천구",
    "강서구", "구로구", "금천구", "영등포구", "동작구",
    "관악구", "서초구", "강남구", "송파구", "강동구"
}

경기_기초자치단체_리스트 = {
    "수원시", "성남시", "고양시", "용인시", "부천시",
    "안산시", "안양시", "남양주시", "화성시", "평택시",
    "의정부시", "시흥시", "파주시", "김포시", "광명시",
    "광주시", "군포시", "오산시", "이천시", "안성시",
    "의왕시", "하남시", "여주시", "양평군", "동두천시",
    "과천시", "가평군", "연천군", "양주시", "포천시",
    "구리시"
}

금천구_법정동_리스트 = {
    "가산동",
    "독산동",
    "시흥동"
}


의왕시_법정동_리스트 = {
    "고천동",
    "부곡동",
    "청계동",
    "오전동",
    "내손동",
}
의왕시_도로명주소_리스트 = {
    "철도박물관로", "백운로", "부곡중앙로", "학현로", "오전로",
    "왕곡로", "고천로", "고산로", "내손로", "내손중앙로",
    "덕영대로", "포일로", "계원대로", "경수대로", "왕림로",
    "백운밸리로", "부곡말길", "청계로", "성고개로", "오전말길"
}
금천구_도로명주소_리스트 = {
    "서부샛길", "가산디지털1로", "가산디지털2로", "가산로", "가산로3길",
    "가산로5길", "가산로7길", "가산로9길", "가산로11길", "가산로12길",
    "가산로14길", "가산로16길", "가산로18길", "가산로20길", "가산로22길",
    "가산로24길", "가산로26길", "가산로28길", "가산로30길", "가산로32길"
}

의왕시_건물번호_리스트= {'142','176','4','8','12','18-3','18-5'}
금천구_건물번호_리스트= {'822','876','64','70','86','90','96','102','156','168',
               '202','216','224','230-2','264','280'}



processed_results=[{'OCR_Text': 'Text 9: e 서울금천구가산동[서부셋길606]',
  '광역자치단체': ['서울'],
  '기초자치단체': ['금천구'],
  '동/읍/면': ['가산동'],
  '도로명주소': ['서부셋길'],
  '건물번호': ['606'],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 19: 경기의왕시월암동[철도박물관로176]',
  '광역자치단체': ['경기'],
  '기초자치단체': ['의왕시'],
  '동/읍/면': ['월암동'],
  '도로명주소': ['철도박물관로'],
  '건물번호': ['176'],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 20: 360-1 -(월암동 한국철도기술',
  '광역자치단체': [],
  '기초자치단체': [],
  '동/읍/면': ['월암동'],
  '도로명주소': [],
  '건물번호': [],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 21: 1/010-9010-1325 3 연구원)주    용박진착',
  '광역자치단체': [],
  '기초자치단체': ['연구'],
  '동/읍/면': [],
  '도로명주소': [],
  '건물번호': [],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 36: 김열시',
  '광역자치단체': [],
  '기초자치단체': ['김열시'],
  '동/읍/면': [],
  '도로명주소': [],
  '건물번호': [],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 39: 경기의왕시 월암(동[철도박물관로176]',
  '광역자치단체': ['경기'],
  '기초자치단체': ['의왕시'],
  '동/읍/면': [],
  '도로명주소': ['철도박물관로'],
  '건물번호': ['176'],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 42: (월암동 한국철도기술연구원) 7',
  '광역자치단체': [],
  '기초자치단체': ['한국철도기술연구'],
  '동/읍/면': ['월암동'],
  '도로명주소': [],
  '건물번호': [],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 44: 동101호텍진학 [칠도박물관로176]',
  '광역자치단체': [],
  '기초자치단체': [],
  '동/읍/면': [],
  '도로명주소': ['칠도박물관로'],
  '건물번호': ['176'],
  '지번주소': [],
  '상세주소': []},
 {'OCR_Text': 'Text 45: [월암동]',
  '광역자치단체': [],
  '기초자치단체': [],
  '동/읍/면': ['월암동'],
  '도로명주소': [],
  '건물번호': [],
  '지번주소': [],
  '상세주소': []}]


import textdistance

### 광역자치단체

def 가장_유사한_광역자치단체(ocr_단어, 후보_리스트):
    최고_유사도 = 0
    최고_매칭 = None
    for 후보 in 후보_리스트:
        유사도 = textdistance.jaro_winkler(ocr_단어, 후보)
        if 유사도 > 최고_유사도:
            최고_유사도 = 유사도
            최고_매칭 = 후보
    
    
    return 최고_매칭, 최고_유사도

# 변환 로그
수정_로그 = []

for 항목 in processed_results:
    기존값들 = 항목['광역자치단체']
    새값들 = []
    텍스트_이름 = 항목['OCR_Text'].split(":")[0].strip()

    for 원본 in 기존값들:
        유사값, 유사도 = 가장_유사한_광역자치단체(원본, 광역자치단체_리스트)
        if 유사도 >= 0.70:
            새값들.append(유사값)
            if 원본 == 유사값:
                수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ✅ 그대로 사용됨 (유사도: {유사도:.2f})")
            else:
                수정_로그.append(f"{텍스트_이름} ▶ '{원본}' → '{유사값}' (유사도: {유사도:.2f})")
            
        else:
            새값들.append(원본)
            수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ❌ 변환 안 됨 (가장 유사: '{유사값}', 유사도: {유사도:.2f})")

    항목['광역자치단체'] = 새값들

# 로그 출력
print("🔍 광역자치단체 유사도 비교 결과:")
for 로그 in 수정_로그:
    print(로그)
    
# 기초자치단체

def 가장_유사한_기초자치단체(ocr_단어, 후보_리스트):
    최고_유사도 = 0
    최고_매칭 = None
    for 후보 in 후보_리스트:
        유사도 = textdistance.jaro_winkler(ocr_단어, 후보)
        if 유사도 > 최고_유사도:
            최고_유사도 = 유사도
            최고_매칭 = 후보
    return 최고_매칭, 최고_유사도


# 기초자치단체 변환 로그
기초자치단체_수정_로그 = []

# 전체 processed_results 순회
for 항목 in processed_results:
    기존값들 = 항목['기초자치단체']
    새값들 = []
    텍스트_이름 = 항목['OCR_Text'].split(":")[0].strip()

    for 원본 in 기존값들:
        유사값, 유사도 = 가장_유사한_기초자치단체(원본, 서울_기초자치단체_리스트.union(경기_기초자치단체_리스트))
        
        if 유사도 >= 0.70:
            새값들.append(유사값)
            if 원본 == 유사값:
                기초자치단체_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ✅ 그대로 사용됨 (유사도: {유사도:.2f})")
            else:
                기초자치단체_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' → '{유사값}' (유사도: {유사도:.2f})")
        else:
            새값들.append(원본)
            기초자치단체_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ❌ 변환 안 됨 (가장 유사: '{유사값}', 유사도: {유사도:.2f})")

    항목['기초자치단체'] = 새값들


# 로그 출력
print("\n🔍 기초자치단체 유사도 비교 결과:")
for 로그 in 기초자치단체_수정_로그:
    print(로그)


# 도로명 주소 


def 가장_유사한_도로명주소(ocr_단어, 후보_리스트):
    최고_유사도 = 0
    최고_매칭 = None
    for 후보 in 후보_리스트:
        유사도 = textdistance.jaro_winkler(ocr_단어, 후보)
        if 유사도 > 최고_유사도:
            최고_유사도 = 유사도
            최고_매칭 = 후보
    return 최고_매칭, 최고_유사도

전체_도로명주소_리스트 = 금천구_도로명주소_리스트.union(의왕시_도로명주소_리스트)


도로명주소_수정_로그 = []

for 항목 in processed_results:
    기존값들 = 항목['도로명주소']
    새값들 = []
    텍스트_이름 = 항목['OCR_Text'].split(":")[0].strip()

    for 원본 in 기존값들:
        유사값, 유사도 = 가장_유사한_도로명주소(원본, 전체_도로명주소_리스트)

        if 유사도 >= 0.70:
            새값들.append(유사값)
            if 원본 == 유사값:
                도로명주소_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ✅ 그대로 사용됨 (유사도: {유사도:.2f})")
            else:
                도로명주소_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' → '{유사값}' (유사도: {유사도:.2f})")
        else:
            새값들.append(원본)
            도로명주소_수정_로그.append(f"{텍스트_이름} ▶ '{원본}' ❌ 변환 안 됨 (가장 유사: '{유사값}', 유사도: {유사도:.2f})")

    항목['도로명주소'] = 새값들


print("\n🔍 도로명주소 유사도 비교 결과:")
for 로그 in 도로명주소_수정_로그:
    print(로그)
#######################################################################################




from jamo import hangul_to_jamo
import textdistance

# 접미사 제거: '시', '군', '구', '동', '읍', '면', '로' 등
def 제거_접미사(text):
    return text[:-1] if text.endswith(("시", "군", "구", "동", "읍", "면", "로")) and len(text) > 1 else text

# 자모 분해
def 분리된_자모(text):
    return ''.join(list(hangul_to_jamo(text)))

#✅ 1. Jaro-Winkler + 접미사 제거

def 유사도_jaro_winkler_접미사(s1, s2):
    s1_core = 제거_접미사(s1)
    s2_core = 제거_접미사(s2)
    return textdistance.jaro_winkler(s1_core, s2_core)


#✅ 2. Jaro + 접미사 제거

def 유사도_jaro_접미사(s1, s2):
    s1_core = 제거_접미사(s1)
    s2_core = 제거_접미사(s2)
    return textdistance.jaro(s1_core, s2_core)


#✅ 3. Jaro + 자모 유사도 + 접미사 제거 → 평균

def 유사도_jaro_자모_접미사(s1, s2):
    s1_core = 제거_접미사(s1)
    s2_core = 제거_접미사(s2)

    # 일반 Jaro
    jaro_score = textdistance.jaro(s1_core, s2_core)

    # 자모 기반 Jaro
    s1_jamo = 분리된_자모(s1_core)
    s2_jamo = 분리된_자모(s2_core)
    jamo_score = textdistance.jaro(s1_jamo, s2_jamo)

    # 평균 반환
    return (jaro_score + jamo_score) / 2

import textdistance

def 유사도_jaro_winkler(s1, s2):
    return textdistance.jaro_winkler(s1, s2)

s1 = "태동로"
s2 = "금동로"

print(f"Jaro-Winkler 유사도 (접미사 제거 없음):",유사도_jaro_winkler(s1, s2))
print("① Jaro-Winkler + 접미사 제거:", 유사도_jaro_winkler_접미사(s1, s2))
print("② Jaro + 접미사 제거:", 유사도_jaro_접미사(s1, s2))
print("③ Jaro + 자모 + 접미사 제거:", 유사도_jaro_자모_접미사(s1, s2))



